{
  "name": "Time Glass Development Rules",
  "description": "Time Glass 项目开发规范和最佳实践",
  "version": "1.0.0",
  "rules": [
    {
      "name": "后端API命名规范",
      "description": "后端API路由和端点命名规范",
      "patterns": [
        {
          "pattern": "backend/backend/app/api/endpoints/*.py",
          "advice": "API端点文件应按功能命名，如 query.py, data.py 等。每个端点函数应有清晰的文档字符串说明功能和参数。"
        },
        {
          "pattern": "backend/backend/app/api/api.py",
          "advice": "API路由注册文件，应保持简洁，只包含路由注册逻辑。"
        }
      ]
    },
    {
      "name": "后端服务层规范",
      "description": "后端服务层代码组织规范",
      "patterns": [
        {
          "pattern": "backend/backend/app/services/*.py",
          "advice": "服务层应包含所有业务逻辑，API层只负责请求处理和响应。服务类应接受依赖注入的数据库客户端。"
        }
      ]
    },
    {
      "name": "后端数据库操作规范",
      "description": "数据库操作相关规范",
      "patterns": [
        {
          "pattern": "backend/backend/app/db/*.py",
          "advice": "数据库操作应使用异步方式，并妥善处理异常。索引名称应使用配置中的前缀。"
        }
      ]
    },
    {
      "name": "前端组件规范",
      "description": "React组件开发规范",
      "patterns": [
        {
          "pattern": "frontend/components/**/*.tsx",
          "advice": "组件应使用函数式组件和React Hooks。需要客户端交互的组件应添加 'use client' 指令。组件应接受明确定义的props并提供默认值。"
        }
      ]
    },
    {
      "name": "前端页面规范",
      "description": "Next.js页面开发规范",
      "patterns": [
        {
          "pattern": "frontend/app/**/*.tsx",
          "advice": "App Router页面组件应保持简洁，复杂逻辑应提取到组件或hooks中。"
        },
        {
          "pattern": "frontend/pages/**/*.tsx",
          "advice": "Pages Router页面应添加 'use client' 指令，并保持与App Router页面风格一致。"
        }
      ]
    },
    {
      "name": "前端API调用规范",
      "description": "前端API调用规范",
      "patterns": [
        {
          "pattern": "frontend/lib/api.ts",
          "advice": "API调用应集中在api.ts文件中，使用类型安全的接口定义请求和响应。"
        }
      ]
    },
    {
      "name": "样式规范",
      "description": "CSS和样式相关规范",
      "patterns": [
        {
          "pattern": "frontend/**/*.tsx",
          "advice": "使用Tailwind CSS类进行样式设计，遵循响应式设计原则。优先使用shadcn/ui组件库。"
        }
      ]
    },
    {
      "name": "错误处理规范",
      "description": "错误处理相关规范",
      "patterns": [
        {
          "pattern": "backend/backend/app/api/endpoints/*.py",
          "advice": "API端点应妥善处理异常，记录日志并返回适当的HTTP状态码和错误信息。"
        },
        {
          "pattern": "frontend/components/**/*.tsx",
          "advice": "前端组件应处理API调用可能的错误，并向用户显示友好的错误信息。"
        }
      ]
    },
    {
      "name": "类型安全规范",
      "description": "TypeScript类型安全相关规范",
      "patterns": [
        {
          "pattern": "frontend/**/*.ts",
          "advice": "使用TypeScript接口定义数据结构，避免使用any类型。"
        },
        {
          "pattern": "frontend/**/*.tsx",
          "advice": "React组件应定义明确的props接口，并使用适当的类型注解。"
        }
      ]
    },
    {
      "name": "性能优化规范",
      "description": "性能优化相关规范",
      "patterns": [
        {
          "pattern": "frontend/components/**/*.tsx",
          "advice": "大型列表应使用分页或虚拟滚动。避免不必要的重渲染，适当使用React.memo或useMemo。"
        },
        {
          "pattern": "backend/backend/app/services/*.py",
          "advice": "查询应使用适当的索引和分页。避免大量数据的内存操作，优先使用数据库聚合功能。"
        }
      ]
    },
    {
      "name": "安全规范",
      "description": "安全相关规范",
      "patterns": [
        {
          "pattern": "backend/backend/app/main.py",
          "advice": "生产环境应配置适当的CORS策略，限制允许的源。"
        },
        {
          "pattern": "backend/backend/app/db/*.py",
          "advice": "生产环境应启用证书验证，并使用安全的连接方式。"
        }
      ]
    },
    {
      "name": "文档规范",
      "description": "代码文档相关规范",
      "patterns": [
        {
          "pattern": "backend/**/*.py",
          "advice": "Python函数应有清晰的文档字符串，说明功能、参数和返回值。"
        },
        {
          "pattern": "frontend/**/*.ts",
          "advice": "TypeScript接口和函数应有JSDoc注释，说明用途和参数。"
        }
      ]
    }
  ]
} 